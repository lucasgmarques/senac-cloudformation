AWSTemplateFormatVersion: "2010-09-09"

Description: "CloudFormation Template for WordPress Deployment"

# Parametros para personalizar a implantacao
Parameters:
  VPCStackName:
    Type: String
    Description: Name of the VPC Stack

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t3.micro
      - t3.small
      - t3.medium
    ConstraintDescription: must be a valid EC2 instance type.

  DBName:
    Default: wordpressdb
    Description: The WordPress database name
    Type: String
    MinLength: 1
    MaxLength: 64
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.

  DBUsername:
    Description: Database username
    Type: String
    MinLength: 1
    MaxLength: 16
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: Must start with a letter and contain only letters and numbers.

  DBPassword:
    Description: Database password
    Type: String
    NoEcho: true
    MinLength: 8
    MaxLength: 41

  DBInstanceClass:
    Default: db.t3.micro
    Description: Database instance class
    Type: String
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
    ConstraintDescription: must select a valid database instance type.

  DBAllocatedStorage:
    Default: 20
    Description: The size of the database (GiB)
    Type: Number
    MinValue: 20
    MaxValue: 100

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  # Usa a AMI mais recente do Amazon Linux 2023
  LatestAmiId:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64"

# Definicao dos recursos da infraestrutura
Resources:
  # Grupo de seguranca para o servidor Web WordPress
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0 # Permite acesso HTTP de qualquer lugar
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
      VpcId:
        Fn::ImportValue: !Sub "${VPCStackName}-VPCID" # Referencia a VPC de outra pilha

  # Grupo de seguranca para o banco de dados RDS
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      GroupDescription: Allow MySQL access from Web Server
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref WebServerSecurityGroup # Permite acesso apenas do servidor Web
      VpcId:
        Fn::ImportValue: !Sub "${VPCStackName}-VPCID"

  # Instância EC2 para o WordPress
  WebServerInstance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          wordpress_install:
            - install_cfn
            - install_wordpress
        install_cfn:
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.WebServerInstance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --configsets wordpress_install --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        install_wordpress:
          packages:
            yum:
              httpd: []
              php8.3: []
              php8.3-mysqlnd: []
              mariadb105: []
              amazon-cloudwatch-agent: []
          sources:
            /var/www/html: "http://wordpress.org/latest.tar.gz"
          files:
            /var/www/html/wp-config.php:
              content: !Sub |
                <?php
                define('DB_NAME', '${DBName}');
                define('DB_USER', '${DBUsername}');
                define('DB_PASSWORD', '${DBPassword}');
                define('DB_HOST', '${WordPressDB.Endpoint.Address}');
                define('DB_CHARSET', 'utf8');
                define('DB_COLLATE', '');

                $table_prefix  = 'wp_';
                define('WP_DEBUG', false);

                if ( !defined('ABSPATH') )
                    define('ABSPATH', dirname(__FILE__) . '/');

                require_once(ABSPATH . 'wp-settings.php');
              mode: "000644"
              owner: apache
              group: apache
          commands:
            configure_permissions:
              command: |
                chown -R apache:apache /var/www/html/wordpress
                chmod -R 755 /var/www/html/wordpress
          services:
            sysvinit:
              httpd:
                enabled: true
                ensureRunning: true
              amazon-cloudwatch-agent:
                  enabled: true
                  ensureRunning: true
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          SubnetId:
            Fn::ImportValue: !Sub "${VPCStackName}-PublicSubnet1ID" # Usa subnet publica da pilha VPC
          GroupSet:
            - !Ref WebServerSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          yum update -y && yum install -y aws-cfn-bootstrap

          # Configura a data e hora
          sudo timedatectl set-timezone America/Sao_Paulo
          sudo systemctl restart chronyd

          # Cria diretório para instalação do Wordpress
          mkdir -p /var/www/html/wordpress

          # Inicializa o CloudFormation Init
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource WebServerInstance --configsets wordpress_install --region ${AWS::Region} || exit 1

          # Sinaliza ao CloudFormation que a instância está pronta
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region} || exit 1
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M # Espera ate 5 minutos pela sinalizacao de conclusao

  # Instancia RDS para o banco de dados MySQL
  WordPressDB:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      DBName: !Ref DBName
      Engine: MySQL
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      PubliclyAccessible: false
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      MultiAZ: false # Configuracao de zona unica para reduzir custos
      BackupRetentionPeriod: 7
      DBSubnetGroupName: !Ref DBSubnetGroup

  # Grupo de subnets para o RDS
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      DBSubnetGroupDescription: "Subnets available for the RDS DB Instance"
      SubnetIds:
        - Fn::ImportValue: !Sub "${VPCStackName}-PrivateSubnet1ID" # Usa subnets privadas da pilha VPC
        - Fn::ImportValue: !Sub "${VPCStackName}-PrivateSubnet2ID"

# Saidas para referencia apos a criacao da pilha
Outputs:
  WebsiteURL:
    Description: WordPress Website URL
    Value: !Sub "http://${WebServerInstance.PublicDnsName}/wordpress"
  
  DBEndpoint:
    Description: Database Endpoint
    Value: !GetAtt WordPressDB.Endpoint.Address